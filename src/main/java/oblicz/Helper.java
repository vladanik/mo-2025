package oblicz;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Helper {

    public static double[] gaussElimination(double[][] A, double[] b) {
        int n = b.length;
        for (int i = 0; i < n; i++) {
            int max = i;
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(A[j][i]) > Math.abs(A[max][i])) {
                    max = j;
                }
            }
            double[] temp = A[i];
            A[i] = A[max];
            A[max] = temp;
            double t = b[i];
            b[i] = b[max];
            b[max] = t;

            for (int j = i + 1; j < n; j++) {
                double factor = A[j][i] / A[i][i];
                b[j] -= factor * b[i];
                for (int k = i; k < n; k++) {
                    A[j][k] -= factor * A[i][k];
                }
            }
        }

        double[] x = new double[n];
        for (int i = n - 1; i >= 0; i--) {
            double sum = 0;
            for (int j = i + 1; j < n; j++) {
                sum += A[i][j] * x[j];
            }
            x[i] = (b[i] - sum) / A[i][i];
        }
        return x;
    }

    public static boolean isValidH(List<Double> xList) {
        double h = xList.get(1) - xList.get(0);
        for (int i = 1; i < xList.size() - 1; i++) {
            if (Math.abs(xList.get(i + 1) - xList.get(i)) != h) {
                return false;
            }
        }
        return true;
    }

    public static int factorial(int n) {
        int result = 1;
        for (int i = 2; i <= n; i++) result *= i;
        return result;
    }

    public static final Map<Integer, double[][]> gaussData = new HashMap<>();
    static {
        gaussData.put(2, new double[][]{
                {-0.5773502691896257, 0.5773502691896257},
                { 1.0000000000000000, 1.0000000000000000}
        });
        gaussData.put(4, new double[][]{
                {-0.3399810435848563, 0.3399810435848563, -0.8611363115940526, 0.8611363115940526},
                { 0.6521451548625461, 0.6521451548625461,  0.3478548451374538, 0.3478548451374538}
        });
        gaussData.put(6, new double[][]{
                {-0.6612093864662645, 0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.9324695142031521, 0.9324695142031521},
                { 0.3607615730481386, 0.3607615730481386,  0.4679139345726910, 0.4679139345726910,  0.1713244923791704, 0.1713244923791704}
        });
        gaussData.put(8, new double[][]{
                {-0.1834346424956498, 0.1834346424956498, -0.5255324099163290, 0.5255324099163290, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363},
                { 0.3626837833783620, 0.3626837833783620,  0.3137066458778873, 0.3137066458778873,  0.2223810344533745, 0.2223810344533745,  0.1012285362903763, 0.1012285362903763}
        });
        gaussData.put(10, new double[][]{
                {-0.1488743389816312, 0.1488743389816312, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717},
                { 0.2955242247147529, 0.2955242247147529,  0.2692667193099963, 0.2692667193099963,  0.2190863625159820, 0.2190863625159820,  0.1494513491505806, 0.1494513491505806,  0.0666713443086881, 0.0666713443086881}
        });
        gaussData.put(16, new double[][]{
                {-0.0950125098376374, 0.0950125098376374, -0.2816035507792589, 0.2816035507792589, -0.4580167776572274, 0.4580167776572274, -0.6178762444026438, 0.6178762444026438, -0.7554044083550030, 0.7554044083550030, -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499, 0.9894009349916499},
                { 0.1894506104550685, 0.1894506104550685,  0.1826034150449236, 0.1826034150449236,  0.1691565193950025, 0.1691565193950025,  0.1495959888165767, 0.1495959888165767,  0.1246289712555339, 0.1246289712555339,  0.0951585116824928, 0.0951585116824928,  0.0622535239386479, 0.0622535239386479,  0.0271524594117541, 0.0271524594117541}
        });
    }
}
